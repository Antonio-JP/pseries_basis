r'''
    Sage package for Functional order Basis.
'''

from sage.all_cmdline import *   # import sage library

from .psbasis import *;

class FunctionalBasis(OrderBasis):
    r'''
        Class for representing a basis of power functions.
        
        A basis of power functions is a type of order basis for power series 
        where the `n`th element is the `n`th power of an order 1 power series `f(x)`. 
        
        The first element in the sequence will always be the constant polynomial 1.

        The second element in the sequence is a function `f(x)` such that `f(0) = 0`
        and `f'(0) \neq 0'
        
        INPUT::
            - ``X``: the name for the operator representing the multiplication by `f(x)`.
    '''
    def __init__(self, X='f'):
        ## Initializing the PolyBasis strcuture
        super(FunctionalBasis,self).__init__();
        
        ## Adding the extra information
        self.__fun_name = X;
        
        ## The multiplication by X compatibility is given
        Sni = self.Sni; n = self.n; Sn = self.Sn;
        self.set_compatibility(X, Sni);
        
    @cached_method
    def get_element(self, n):
        R = self.polynomial_ring(self.__fun_name);
        f = R.gens()[0];
        return f**n;

    def __repr__(self):
        return "Functional Power Basis (%s)" %(self.__fun_name);
    
    def _latex_(self):
        return r"\left\{%s(x)^n\right\}_{n \geq 0}" %(self.__fun_name);

###############################################################
### EXAMPLES OF PARTICULAR ORTHOGONAL BASIS
###############################################################
class ExponentialBasis(FunctionalBasis):
    r'''
        Class for the power functional basis generated by the exponential.
        
        This class represents the FunctionalBasis formed by the set of powers
        of the exponential function `f(x) = exp(x)-1`. The minus one only shows up
        because `f(x)` must have order 0.
        
        Following the notation in https://arxiv.org/abs/1804.02964v1, we can find that 
        this basis has compatibilities with the multiplication by `exp(x)` and the 
        derivation operator
        
        INPUT::
            - ``E``: the name for the operator representing the multiplication by `exp(x)`.
            - ``Dx``: the name for the operator representing the derivation by `x`.
    '''
    def __init__(self, E='E', Dx='Dx'):
        super(ExponentialBasis, self).__init__();

        Sni = self.Sni; n = self.n; Sn = self.Sn;

        self.set_compatibility(E, Sni + 1);
        self.set_compatibility(Dx, n + (n+1)*Sn);

    

    def __repr__(self):
        return "Jacobi (%s,%s)-Basis (%s, %s, %s,...)" %(self.__alpha, self.__beta,self.get_element(0), self.get_element(1), self.get_element(2));
    
    def _latex_(self):
        return r"\left\{P_n^{(%s,%s)}(%s)\right\}_{n \geq 0}" %(self.__alpha, self.__beta,self.var_name());

